--- a/lib/CMakeLists.txt
+++ b/lib/CMakeLists.txt
@@ -65,6 +65,18 @@ if(MSVC)
     list(APPEND VORBIS_SOURCES ../win32/vorbis.def)
     list(APPEND VORBISENC_SOURCES ../win32/vorbisenc.def)
     list(APPEND VORBISFILE_SOURCES ../win32/vorbisfile.def)
+
+    include(CheckSymbolExists)
+    check_symbol_exists(_X86_ "Windows.h" _X86_)
+    check_symbol_exists(_AMD64_ "Windows.h" _X64_)
+    check_symbol_exists(_ARM_ "Windows.h" _ARM_)
+    check_symbol_exists(_ARM64_ "Windows.h" _ARM64_)
+
+    if(_ARM64_)
+      add_definitions(-D_M_ARM -D_M_ARM64)
+    elseif(_ARM_)
+      add_definitions(-D_M_ARM)
+    endif()
 endif()
 
 include_directories(../include)
--- a/lib/os.h
+++ b/lib/os.h
@@ -147,7 +147,7 @@ static __inline void vorbis_fpu_restore(vorbis_fpu_control fpu){
 
 /* Optimized code path for x86_64 builds. Uses SSE2 intrinsics. This can be
    done safely because all x86_64 CPUs supports SSE2. */
-#if (defined(_MSC_VER) && defined(_WIN64)) || (defined(__GNUC__) && defined (__x86_64__))
+#if (defined(_MSC_VER) && defined(_WIN64) && !defined(_M_ARM)) || (defined(__GNUC__) && defined (__x86_64__))
 #  define VORBIS_FPU_CONTROL
 
 typedef ogg_int16_t vorbis_fpu_control;
